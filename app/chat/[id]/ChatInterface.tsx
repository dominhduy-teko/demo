"use client";

import { useState, useRef, useEffect } from "react";
import Header from "@/components/Header";
import Button from "@/components/ui/Button";
import Card from "@/components/ui/Card";

interface Message {
    id: string;
    type: "user" | "bot";
    content: string;
    timestamp: Date;
    sources?: string[];
}

interface ChatInterfaceProps {
    botId: string;
}

export default function ChatInterface({ botId }: ChatInterfaceProps) {
    const [messages, setMessages] = useState<Message[]>([
        {
            id: "1",
            type: "bot",
            content:
                "Xin ch√†o! T√¥i l√† chatbot AI ƒë∆∞·ª£c t·∫°o t·ª´ d·ªØ li·ªáu Excel. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n tr·∫£ l·ªùi c√°c c√¢u h·ªèi d·ª±a tr√™n d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c cung c·∫•p. H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨!",
            timestamp: new Date(),
        },
    ]);

    const [inputMessage, setInputMessage] = useState("");
    const [isTyping, setIsTyping] = useState(false);
    const [botInfo] = useState({
        id: botId,
        name: "Chatbot tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m",
        model: "Qwen3 7B",
        status: "active",
        dataSource: "product_catalog.xlsx",
    });

    const messagesEndRef = useRef<HTMLDivElement>(null);
    const inputRef = useRef<HTMLInputElement>(null);

    // Suggested questions based on bot type
    const suggestedQuestions = [
        "S·∫£n ph·∫©m c·ªßa c√¥ng ty c√≥ nh·ªØng t√≠nh nƒÉng g√¨ n·ªïi b·∫≠t?",
        "Quy tr√¨nh b·∫£o h√†nh nh∆∞ th·∫ø n√†o?",
        "C√≥ nh·ªØng g√≥i d·ªãch v·ª• n√†o ƒë∆∞·ª£c cung c·∫•p?",
        "L√†m th·∫ø n√†o ƒë·ªÉ li√™n h·ªá h·ªó tr·ª£ k·ªπ thu·∫≠t?",
        "Ch√≠nh s√°ch ƒë·ªïi tr·∫£ s·∫£n ph·∫©m ra sao?",
        "C√≥ h·ªó tr·ª£ c√†i ƒë·∫∑t v√† s·ª≠ d·ª•ng kh√¥ng?",
    ];

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    };

    useEffect(() => {
        scrollToBottom();
    }, [messages]);

    const simulateBotResponse = async (
        userMessage: string
    ): Promise<Message> => {
        // Simulate API call delay
        await new Promise((resolve) =>
            setTimeout(resolve, 1500 + Math.random() * 1000)
        );

        // Mock responses based on keywords
        let response = "";
        let sources: string[] = [];

        if (
            userMessage.toLowerCase().includes("s·∫£n ph·∫©m") ||
            userMessage.toLowerCase().includes("t√≠nh nƒÉng")
        ) {
            response =
                "D·ª±a tr√™n d·ªØ li·ªáu Excel, s·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i c√≥ nh·ªØng t√≠nh nƒÉng n·ªïi b·∫≠t sau:\\n\\n‚Ä¢ **Giao di·ªán th√¢n thi·ªán**: D·ªÖ s·ª≠ d·ª•ng cho m·ªçi ƒë·ªëi t∆∞·ª£ng\\n‚Ä¢ **B·∫£o m·∫≠t cao**: M√£ h√≥a d·ªØ li·ªáu 256-bit\\n‚Ä¢ **T√≠ch h·ª£p API**: K·∫øt n·ªëi v·ªõi h∆°n 100+ ·ª©ng d·ª•ng\\n‚Ä¢ **H·ªó tr·ª£ ƒëa n·ªÅn t·∫£ng**: Web, Mobile, Desktop\\n‚Ä¢ **B√°o c√°o th·ªùi gian th·ª±c**: Dashboard tr·ª±c quan\\n\\nB·∫°n c√≥ mu·ªën t√¨m hi·ªÉu chi ti·∫øt v·ªÅ t√≠nh nƒÉng n√†o c·ª• th·ªÉ kh√¥ng?";
            sources = ["B·∫£ng_T√≠nh_NƒÉng_S·∫£n_Ph·∫©m", "Th√¥ng_S·ªë_K·ªπ_Thu·∫≠t"];
        } else if (
            userMessage.toLowerCase().includes("b·∫£o h√†nh") ||
            userMessage.toLowerCase().includes("warranty")
        ) {
            response =
                "Theo ch√≠nh s√°ch b·∫£o h√†nh trong d·ªØ li·ªáu c·ªßa ch√∫ng t√¥i:\\n\\n**Th·ªùi gian b·∫£o h√†nh:**\\n‚Ä¢ Ph·∫ßn c·ª©ng: 24 th√°ng\\n‚Ä¢ Ph·∫ßn m·ªÅm: 12 th√°ng k·ªÉ t·ª´ ng√†y k√≠ch ho·∫°t\\n‚Ä¢ H·ªó tr·ª£ k·ªπ thu·∫≠t: Tr·ªçn ƒë·ªùi s·∫£n ph·∫©m\\n\\n**Quy tr√¨nh b·∫£o h√†nh:**\\n1. Li√™n h·ªá hotline: 1900-xxxx\\n2. Cung c·∫•p m√£ s·∫£n ph·∫©m v√† m√¥ t·∫£ l·ªói\\n3. Nh·∫≠n h∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c ho·∫∑c l·ªãch h·∫πn\\n4. X·ª≠ l√Ω trong v√≤ng 24-48h\\n\\nB·∫£o h√†nh kh√¥ng √°p d·ª•ng cho c√°c tr∆∞·ªùng h·ª£p do l·ªói ng∆∞·ªùi d√πng ho·∫∑c thi√™n tai.";
            sources = ["Ch√≠nh_S√°ch_B·∫£o_H√†nh", "Quy_Tr√¨nh_H·ªó_Tr·ª£"];
        } else if (
            userMessage.toLowerCase().includes("g√≥i d·ªãch v·ª•") ||
            userMessage.toLowerCase().includes("pricing")
        ) {
            response =
                "Ch√∫ng t√¥i c√≥ 3 g√≥i d·ªãch v·ª• ch√≠nh:\\n\\n**üåü G√≥i C∆° b·∫£n - 299k/th√°ng**\\n‚Ä¢ T·ªëi ƒëa 100 ng∆∞·ªùi d√πng\\n‚Ä¢ 5GB l∆∞u tr·ªØ\\n‚Ä¢ H·ªó tr·ª£ email\\n\\n**üöÄ G√≥i Chuy√™n nghi·ªáp - 799k/th√°ng**\\n‚Ä¢ T·ªëi ƒëa 500 ng∆∞·ªùi d√πng\\n‚Ä¢ 50GB l∆∞u tr·ªØ\\n‚Ä¢ H·ªó tr·ª£ 24/7\\n‚Ä¢ T√≠ch h·ª£p API\\n\\n**üíé G√≥i Doanh nghi·ªáp - 1,999k/th√°ng**\\n‚Ä¢ Kh√¥ng gi·ªõi h·∫°n ng∆∞·ªùi d√πng\\n‚Ä¢ 500GB l∆∞u tr·ªØ\\n‚Ä¢ Dedicated support\\n‚Ä¢ Custom features\\n\\nT·∫•t c·∫£ g√≥i ƒë·ªÅu c√≥ 14 ng√†y d√πng th·ª≠ mi·ªÖn ph√≠!";
            sources = ["B·∫£ng_Gi√°_D·ªãch_V·ª•", "So_S√°nh_G√≥i_C∆∞·ªõc"];
        } else if (
            userMessage.toLowerCase().includes("li√™n h·ªá") ||
            userMessage.toLowerCase().includes("h·ªó tr·ª£")
        ) {
            response =
                "B·∫°n c√≥ th·ªÉ li√™n h·ªá v·ªõi ch√∫ng t√¥i qua c√°c k√™nh sau:\\n\\nüìû **Hotline**: 1900-1234 (24/7)\\nüìß **Email**: support@company.com\\nüí¨ **Live Chat**: Tr√™n website (8h-22h)\\nüè¢ **VƒÉn ph√≤ng**: 123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM\\n\\n**Th·ªùi gian h·ªó tr·ª£:**\\n‚Ä¢ Kh·∫©n c·∫•p: 24/7\\n‚Ä¢ T∆∞ v·∫•n k·ªπ thu·∫≠t: T2-T6 (8h-18h)\\n‚Ä¢ T∆∞ v·∫•n b√°n h√†ng: T2-T7 (8h-20h)\\n\\nƒê·ªôi ng≈© k·ªπ thu·∫≠t s·∫Ω ph·∫£n h·ªìi trong v√≤ng 30 ph√∫t ƒë·ªëi v·ªõi c√°c y√™u c·∫ßu kh·∫©n c·∫•p.";
            sources = ["Th√¥ng_Tin_Li√™n_H·ªá", "K√™nh_H·ªó_Tr·ª£"];
        } else if (
            userMessage.toLowerCase().includes("ƒë·ªïi tr·∫£") ||
            userMessage.toLowerCase().includes("return")
        ) {
            response =
                "Ch√≠nh s√°ch ƒë·ªïi tr·∫£ c·ªßa ch√∫ng t√¥i:\\n\\n**‚è∞ Th·ªùi gian ƒë·ªïi tr·∫£:**\\n‚Ä¢ S·∫£n ph·∫©m l·ªói: 30 ng√†y\\n‚Ä¢ Kh√¥ng h√†i l√≤ng: 15 ng√†y\\n‚Ä¢ S·∫£n ph·∫©m nguy√™n seal: 7 ng√†y\\n\\n**üìã ƒêi·ªÅu ki·ªán:**\\n‚Ä¢ C√≤n nguy√™n bao b√¨, tem m√°c\\n‚Ä¢ C√≥ h√≥a ƒë∆°n mua h√†ng\\n‚Ä¢ Kh√¥ng c√≥ d·∫•u hi·ªáu s·ª≠ d·ª•ng\\n‚Ä¢ Ph·ª• ki·ªán ƒë·∫ßy ƒë·ªß\\n\\n**üîÑ Quy tr√¨nh:**\\n1. Li√™n h·ªá b·ªô ph·∫≠n CSKH\\n2. G·ª≠i s·∫£n ph·∫©m v·ªÅ kho (mi·ªÖn ph√≠ ship)\\n3. Ki·ªÉm tra v√† x√°c nh·∫≠n\\n4. Ho√†n ti·ªÅn trong 3-5 ng√†y l√†m vi·ªác\\n\\nTr∆∞·ªùng h·ª£p ƒë·ªïi s·∫£n ph·∫©m m·ªõi, ch√∫ng t√¥i s·∫Ω g·ª≠i ngay sau khi nh·∫≠n ƒë∆∞·ª£c h√†ng c≈©.";
            sources = ["Ch√≠nh_S√°ch_ƒê·ªïi_Tr·∫£", "Quy_Tr√¨nh_Ho√†n_Ti·ªÅn"];
        } else {
            response =
                "T√¥i hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n v√† ƒëang t√¨m ki·∫øm th√¥ng tin t·ª´ d·ªØ li·ªáu Excel. Tuy nhi√™n, c√≥ v·∫ª nh∆∞ t√¥i c·∫ßn th√™m th√¥ng tin chi ti·∫øt ƒë·ªÉ ƒë∆∞a ra c√¢u tr·∫£ l·ªùi ch√≠nh x√°c nh·∫•t.\\n\\nB·∫°n c√≥ th·ªÉ:\\n‚Ä¢ Di·ªÖn ƒë·∫°t c√¢u h·ªèi c·ª• th·ªÉ h∆°n\\n‚Ä¢ S·ª≠ d·ª•ng t·ª´ kh√≥a li√™n quan ƒë·∫øn s·∫£n ph·∫©m/d·ªãch v·ª•\\n‚Ä¢ Th·ª≠ m·ªôt trong nh·ªØng c√¢u h·ªèi g·ª£i √Ω b√™n d∆∞·ªõi\\n\\nT√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n!";
            sources = [];
        }

        return {
            id: Date.now().toString(),
            type: "bot",
            content: response,
            timestamp: new Date(),
            sources: sources.length > 0 ? sources : undefined,
        };
    };

    const handleSendMessage = async () => {
        if (!inputMessage.trim()) return;

        const userMessage: Message = {
            id: Date.now().toString(),
            type: "user",
            content: inputMessage.trim(),
            timestamp: new Date(),
        };

        setMessages((prev) => [...prev, userMessage]);
        setInputMessage("");
        setIsTyping(true);

        try {
            const botResponse = await simulateBotResponse(userMessage.content);
            setMessages((prev) => [...prev, botResponse]);
        } catch (error) {
            const errorMessage: Message = {
                id: (Date.now() + 1).toString(),
                type: "bot",
                content: "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.",
                timestamp: new Date(),
            };
            setMessages((prev) => [...prev, errorMessage]);
        } finally {
            setIsTyping(false);
        }
    };

    const handleSuggestedQuestion = (question: string) => {
        setInputMessage(question);
        inputRef.current?.focus();
    };

    const handleKeyPress = (e: React.KeyboardEvent) => {
        if (e.key === "Enter" && !e.shiftKey) {
            e.preventDefault();
            handleSendMessage();
        }
    };

    const formatTimestamp = (date: Date) => {
        return date.toLocaleTimeString("vi-VN", {
            hour: "2-digit",
            minute: "2-digit",
        });
    };

    return (
        <div className="min-h-screen bg-gray-50 flex flex-col">
            <Header />

            {/* Bot Info Header */}
            <div className="bg-white border-b px-6 py-4">
                <div className="max-w-4xl mx-auto flex items-center justify-between">
                    <div className="flex items-center gap-4">
                        <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center">
                            <i className="ri-robot-line text-xl text-blue-600"></i>
                        </div>
                        <div>
                            <h1 className="text-xl font-semibold text-gray-900">
                                {botInfo.name}
                            </h1>
                            <div className="flex items-center gap-4 text-sm text-gray-600">
                                <span>M√¥ h√¨nh: {botInfo.model}</span>
                                <span>‚Ä¢</span>
                                <span>D·ªØ li·ªáu: {botInfo.dataSource}</span>
                                <span>‚Ä¢</span>
                                <div className="flex items-center gap-1">
                                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                                    <span>Ho·∫°t ƒë·ªông</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div className="flex items-center gap-2">
                        <Button variant="outline" size="sm">
                            <i className="ri-download-line w-4 h-4 flex items-center justify-center mr-2"></i>
                            Xu·∫•t l·ªãch s·ª≠
                        </Button>
                        <Button variant="outline" size="sm">
                            <i className="ri-restart-line w-4 h-4 flex items-center justify-center mr-2"></i>
                            L√†m m·ªõi
                        </Button>
                    </div>
                </div>
            </div>

            {/* Chat Container */}
            <div className="flex-1 flex flex-col max-w-4xl mx-auto w-full">
                {/* Messages Area */}
                <div className="flex-1 overflow-y-auto px-6 py-6 space-y-4">
                    {messages.map((message) => (
                        <div
                            key={message.id}
                            className={`flex ${
                                message.type === "user"
                                    ? "justify-end"
                                    : "justify-start"
                            }`}
                        >
                            <div
                                className={`max-w-2xl ${
                                    message.type === "user"
                                        ? "order-2"
                                        : "order-1"
                                }`}
                            >
                                <div
                                    className={`rounded-2xl px-4 py-3 ${
                                        message.type === "user"
                                            ? "bg-blue-600 text-white"
                                            : "bg-white border shadow-sm"
                                    }`}
                                >
                                    <div className="whitespace-pre-line text-sm leading-relaxed">
                                        {message.content
                                            .split("\\n")
                                            .map((line, index) => (
                                                <div key={index}>
                                                    {line.startsWith("‚Ä¢") ? (
                                                        <div className="ml-2">
                                                            {line}
                                                        </div>
                                                    ) : line.startsWith("**") &&
                                                      line.endsWith("**") ? (
                                                        <div className="font-semibold mt-2 mb-1">
                                                            {line.replace(
                                                                /\*\*/g,
                                                                ""
                                                            )}
                                                        </div>
                                                    ) : (
                                                        <div>{line}</div>
                                                    )}
                                                </div>
                                            ))}
                                    </div>

                                    {message.sources &&
                                        message.sources.length > 0 && (
                                            <div className="mt-3 pt-3 border-t border-gray-100">
                                                <div className="text-xs text-gray-500 mb-2">
                                                    <i className="ri-file-text-line mr-1"></i>
                                                    Ngu·ªìn tham kh·∫£o:
                                                </div>
                                                <div className="flex flex-wrap gap-1">
                                                    {message.sources.map(
                                                        (source, index) => (
                                                            <span
                                                                key={index}
                                                                className="px-2 py-1 bg-gray-100 text-gray-600 rounded-full text-xs"
                                                            >
                                                                {source.replace(
                                                                    /_/g,
                                                                    " "
                                                                )}
                                                            </span>
                                                        )
                                                    )}
                                                </div>
                                            </div>
                                        )}
                                </div>
                                <div
                                    className={`text-xs text-gray-500 mt-1 ${
                                        message.type === "user"
                                            ? "text-right"
                                            : "text-left"
                                    }`}
                                >
                                    {formatTimestamp(message.timestamp)}
                                </div>
                            </div>

                            {message.type === "bot" && (
                                <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3 flex-shrink-0 order-1">
                                    <i className="ri-robot-line text-sm text-blue-600"></i>
                                </div>
                            )}
                        </div>
                    ))}

                    {isTyping && (
                        <div className="flex justify-start">
                            <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3 flex-shrink-0">
                                <i className="ri-robot-line text-sm text-blue-600"></i>
                            </div>
                            <div className="bg-white border rounded-2xl px-4 py-3 shadow-sm">
                                <div className="flex items-center gap-1">
                                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                                    <div
                                        className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                                        style={{ animationDelay: "0.1s" }}
                                    ></div>
                                    <div
                                        className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                                        style={{ animationDelay: "0.2s" }}
                                    ></div>
                                </div>
                            </div>
                        </div>
                    )}

                    <div ref={messagesEndRef} />
                </div>

                {/* Suggested Questions */}
                {messages.length === 1 && (
                    <div className="px-6 py-4 bg-gray-50">
                        <div className="text-sm text-gray-600 mb-3">
                            üí° B·∫°n c√≥ th·ªÉ th·ª≠ h·ªèi:
                        </div>
                        <div className="flex flex-wrap gap-2">
                            {suggestedQuestions
                                .slice(0, 3)
                                .map((question, index) => (
                                    <button
                                        key={index}
                                        onClick={() =>
                                            handleSuggestedQuestion(question)
                                        }
                                        className="px-3 py-2 bg-white border border-gray-200 rounded-lg text-sm text-gray-700 hover:bg-gray-50 transition-colors cursor-pointer whitespace-nowrap"
                                    >
                                        {question}
                                    </button>
                                ))}
                        </div>
                    </div>
                )}

                {/* Input Area */}
                <div className="px-6 py-4 bg-white border-t">
                    <div className="flex items-end gap-3">
                        <div className="flex-1">
                            <input
                                ref={inputRef}
                                type="text"
                                value={inputMessage}
                                onChange={(e) =>
                                    setInputMessage(e.target.value)
                                }
                                onKeyPress={handleKeyPress}
                                placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
                                className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none text-sm"
                                disabled={isTyping}
                            />
                        </div>
                        <Button
                            onClick={handleSendMessage}
                            disabled={!inputMessage.trim() || isTyping}
                            className="px-6 py-3"
                        >
                            {isTyping ? (
                                <i className="ri-loader-4-line w-4 h-4 flex items-center justify-center animate-spin"></i>
                            ) : (
                                <i className="ri-send-plane-line w-4 h-4 flex items-center justify-center"></i>
                            )}
                        </Button>
                    </div>
                    <div className="text-xs text-gray-500 mt-2 text-center">
                        Chatbot AI ƒë∆∞·ª£c t·∫°o t·ª´ d·ªØ li·ªáu Excel ‚Ä¢ Nh·∫•n Enter ƒë·ªÉ g·ª≠i
                    </div>
                </div>
            </div>
        </div>
    );
}
